# Lists are Mutable! Can be changed without changing id.

# By The Way Method = Function, but Method has Object!

some_list.append(something)            # add new item to a list

.reverse()
.insert(5, 10)
.remove(10)
.port(2)
.enumerate()   # print(list(enumerate(rand_list)))
.extend()
.sort()
.sort(reverse=True)


Search
            "dog" in rand_list
            

Range
            one_to_ten = list(range(1,10))


Swap
            temp = our_list[j]
            our_list[j] = our_list[j+1]
            our_list[j+1] = temp
            
            
Random
            import random
            num_list = []
            for i in range(5):
                num_list.append(random.randrange(1, 9))

            for i in num_list:
                print(i)
                
                
Even List   
            #(til 10)
            even_list = [i*2 for i in range (5)]      
                
-----------------------------------------------                

Nested Loop
            for i in range(1, 10):
                print("#", end=" ")
                for j in range(1, 10):
                     print(i * j, end=" ")
                print()
Output:
# 1 2 3 4 5 6 7 8 9 
# 2 4 6 8 10 12 14 16 18 
# 3 6 9 12 15 18 21 24 27 
# 4 8 12 16 20 24 28 32 36 
# 5 10 15 20 25 30 35 40 45 
# 6 12 18 24 30 36 42 48 54 
# 7 14 21 28 35 42 49 56 63 
# 8 16 24 32 40 48 56 64 72 
# 9 18 27 36 45 54 63 72 81

-----------------------------------------------

Nexted Loop List

mult_d_list = [[0] * 10 for i in range(10)]
for i in range(1, 10):
    for j in range(1, 10):
        mult_d_list[i][j] = i * j
 
for i in range(1, 10):
    print("#", end=" ")
    for j in range(1, 10):
        print(mult_d_list[i][j], end=", ")
    print()

Output:
# 1, 2, 3, 4, 5, 6, 7, 8, 9, 
# 2, 4, 6, 8, 10, 12, 14, 16, 18, 
# 3, 6, 9, 12, 15, 18, 21, 24, 27, 
# 4, 8, 12, 16, 20, 24, 28, 32, 36, 
# 5, 10, 15, 20, 25, 30, 35, 40, 45, 
# 6, 12, 18, 24, 30, 36, 42, 48, 54, 
# 7, 14, 21, 28, 35, 42, 49, 56, 63, 
# 8, 16, 24, 32, 40, 48, 56, 64, 72, 
# 9, 18, 27, 36, 45, 54, 63, 72, 81,


-----------------------------------------------
                
                     
Multi Dimensional List
            mul_d_list = [[0] * 10 for i in range(10)]
            for i in range(10):
                 for j in range(10):
                        mul_d_list[i][j] = "{} : {}".format(i, j)
            for i in range(10):
                 for j in range(10):
                        print(mul_d_list[i][j], end=" ||"
                 print()               
Output:
0 : 0 || 0 : 1 || 0 : 2 || 0 : 3 || 0 : 4 || 0 : 5 || 0 : 6 || 0 : 7 || 0 : 8 || 0 : 9 || 
1 : 0 || 1 : 1 || 1 : 2 || 1 : 3 || 1 : 4 || 1 : 5 || 1 : 6 || 1 : 7 || 1 : 8 || 1 : 9 || 
2 : 0 || 2 : 1 || 2 : 2 || 2 : 3 || 2 : 4 || 2 : 5 || 2 : 6 || 2 : 7 || 2 : 8 || 2 : 9 || 
3 : 0 || 3 : 1 || 3 : 2 || 3 : 3 || 3 : 4 || 3 : 5 || 3 : 6 || 3 : 7 || 3 : 8 || 3 : 9 || 
4 : 0 || 4 : 1 || 4 : 2 || 4 : 3 || 4 : 4 || 4 : 5 || 4 : 6 || 4 : 7 || 4 : 8 || 4 : 9 || 
5 : 0 || 5 : 1 || 5 : 2 || 5 : 3 || 5 : 4 || 5 : 5 || 5 : 6 || 5 : 7 || 5 : 8 || 5 : 9 || 
6 : 0 || 6 : 1 || 6 : 2 || 6 : 3 || 6 : 4 || 6 : 5 || 6 : 6 || 6 : 7 || 6 : 8 || 6 : 9 || 
7 : 0 || 7 : 1 || 7 : 2 || 7 : 3 || 7 : 4 || 7 : 5 || 7 : 6 || 7 : 7 || 7 : 8 || 7 : 9 || 
8 : 0 || 8 : 1 || 8 : 2 || 8 : 3 || 8 : 4 || 8 : 5 || 8 : 6 || 8 : 7 || 8 : 8 || 8 : 9 || 
9 : 0 || 9 : 1 || 9 : 2 || 9 : 3 || 9 : 4 || 9 : 5 || 9 : 6 || 9 : 7 || 9 : 8 || 9 : 9 || 

-----------------------------------------------

List-2 > sum67
prev  |  next  |  chance
Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and
extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.


sum67([1, 2, 2]) → 5
sum67([1, 2, 2, 6, 99, 99, 7]) → 5
sum67([1, 1, 6, 7, 2]) → 4

Solution:
def sum67(nums):
  num = True
  sum = 0

  for i in nums:
      if i == 6:
          num = False

      if num:
          sum += i
          continue

      if i == 7:
          num = True

  return sum
  
  Expected	Run		
sum67([1, 2, 2]) → 5	5	OK	
sum67([1, 2, 2, 6, 99, 99, 7]) → 5	5	OK	
sum67([1, 1, 6, 7, 2]) → 4	4	OK	
sum67([1, 6, 2, 2, 7, 1, 6, 99, 99, 7]) → 2	2	OK	
sum67([1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7]) → 2	2	OK	
sum67([2, 7, 6, 2, 6, 7, 2, 7]) → 18	18	OK	
sum67([2, 7, 6, 2, 6, 2, 7]) → 9	9	OK	
sum67([1, 6, 7, 7]) → 8	8	OK	
sum67([6, 7, 1, 6, 7, 7]) → 8	8	OK	
sum67([6, 8, 1, 6, 7]) → 0	0	OK	
sum67([]) → 0	0	OK	
sum67([6, 7, 11]) → 11	11	OK	
sum67([11, 6, 7, 11]) → 22	22	OK	
sum67([2, 2, 6, 7, 7]) → 11	11	OK	
other tests
OK	

All Correct



