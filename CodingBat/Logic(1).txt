Logic-2 > round_sum
prev  |  next  |  chance
For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values. To avoid code repetition, write a separate helper "def round10(num):" and call it 3 times. Write the helper entirely below and at the same indent level as round_sum().


round_sum(16, 17, 18) → 60
round_sum(12, 13, 14) → 30
round_sum(6, 4, 4) → 10

Solution:

def round_sum(a, b, c):
    result = round10(a) + round10(b) + round10(c)
    return result



def round10(num):
  res = [int(x) for x in str(num)]
  if res[-1] >= 5:
    rounded = round(num/10)*10 +10
    return int(rounded)
  else:
    rounded = round(num / 10) * 10
    return int(rounded)
    
    
    Expected	Run		
round_sum(16, 17, 18) → 60	60	OK	
round_sum(12, 13, 14) → 30	30	OK	
round_sum(6, 4, 4) → 10	10	OK	
round_sum(4, 6, 5) → 20	20	OK	
round_sum(4, 4, 6) → 10	10	OK	
round_sum(9, 4, 4) → 10	10	OK	
round_sum(0, 0, 1) → 0	0	OK	
round_sum(0, 9, 0) → 10	10	OK	
round_sum(10, 10, 19) → 40	40	OK	
round_sum(20, 30, 40) → 90	90	OK	
round_sum(45, 21, 30) → 100	100	OK	
round_sum(23, 11, 26) → 60	60	OK	
round_sum(23, 24, 25) → 70	70	OK	
round_sum(25, 24, 25) → 80	80	OK	
round_sum(23, 24, 29) → 70	70	OK	
round_sum(11, 24, 36) → 70	70	OK	
round_sum(24, 36, 32) → 90	90	OK	
round_sum(14, 12, 26) → 50	50	OK	
round_sum(12, 10, 24) → 40	40	OK	
other tests
OK	

All Correct

##################################################################################

Logic-2 > lucky_sum
prev  |  next  |  chance
Given 3 int values, a b c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.


lucky_sum(1, 2, 3) → 6
lucky_sum(1, 2, 13) → 3
lucky_sum(1, 13, 3) → 1

def lucky_sum(a, b, c):
  abc_list = [a, b, c]
  abc_sum = 0
  for i in abc_list:
    if i != 13:
      abc_sum += i
    else:
      break
  
  return abc_sum
  
  Expected	Run		
lucky_sum(1, 2, 3) → 6	6	OK	
lucky_sum(1, 2, 13) → 3	3	OK	
lucky_sum(1, 13, 3) → 1	1	OK	
lucky_sum(1, 13, 13) → 1	1	OK	
lucky_sum(6, 5, 2) → 13	13	OK	
lucky_sum(13, 2, 3) → 0	0	OK	
lucky_sum(13, 2, 13) → 0	0	OK	
lucky_sum(13, 13, 2) → 0	0	OK	
lucky_sum(9, 4, 13) → 13	13	OK	
lucky_sum(8, 13, 2) → 8	8	OK	
lucky_sum(7, 2, 1) → 10	10	OK	
lucky_sum(3, 3, 13) → 6	6	OK	
other tests
OK	

All Correct

####################################################################

Logic-2 > no_teen_sum
prev  |  next  |  chance
Given 3 int values, a b c, return their sum. However, if any of the values is a teen -- in the range 13..19 inclusive -- then that value counts as 0, except 15 and 16 do not count as a teens. Write a separate helper "def fix_teen(n):"that takes in an int value and returns that value fixed for the teen rule. In this way, you avoid repeating the teen code 3 times (i.e. "decomposition"). Define the helper below and at the same indent level as the main no_teen_sum().


no_teen_sum(1, 2, 3) → 6
no_teen_sum(2, 13, 1) → 3
no_teen_sum(2, 1, 14) → 3

Solution:

def no_teen_sum(a, b, c):
  return fix_teen(a) + fix_teen(b) + fix_teen(c)
  
def fix_teen(n):
  if n >= 13 and n <= 19 and n != 15 and n != 16:
    return 0
  else:
    return n
    
    
Expected	Run		
no_teen_sum(1, 2, 3) → 6	6	OK	
no_teen_sum(2, 13, 1) → 3	3	OK	
no_teen_sum(2, 1, 14) → 3	3	OK	
no_teen_sum(2, 1, 15) → 18	18	OK	
no_teen_sum(2, 1, 16) → 19	19	OK	
no_teen_sum(2, 1, 17) → 3	3	OK	
no_teen_sum(17, 1, 2) → 3	3	OK	
no_teen_sum(2, 15, 2) → 19	19	OK	
no_teen_sum(16, 17, 18) → 16	16	OK	
no_teen_sum(17, 18, 19) → 0	0	OK	
no_teen_sum(15, 16, 1) → 32	32	OK	
no_teen_sum(15, 15, 19) → 30	30	OK	
no_teen_sum(15, 19, 16) → 31	31	OK	
no_teen_sum(5, 17, 18) → 5	5	OK	
no_teen_sum(17, 18, 16) → 16	16	OK	
no_teen_sum(17, 19, 18) → 0	0	OK	
other tests
OK	

All Correct 

#########################################################

List-2 > big_diff
prev  |  next  |  chance
Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array. Note: the built-in min(v1, v2) and max(v1, v2) functions return the smaller or larger of two values.


big_diff([10, 3, 5, 6]) → 7
big_diff([7, 2, 10, 9]) → 8
big_diff([2, 10, 7, 2]) → 8

Solution:
def big_diff(nums):
  return max(nums) - min(nums)
 
 Expected	Run		
big_diff([10, 3, 5, 6]) → 7	7	OK	
big_diff([7, 2, 10, 9]) → 8	8	OK	
big_diff([2, 10, 7, 2]) → 8	8	OK	
big_diff([2, 10]) → 8	8	OK	
big_diff([10, 2]) → 8	8	OK	
big_diff([10, 0]) → 10	10	OK	
big_diff([2, 3]) → 1	1	OK	
big_diff([2, 2]) → 0	0	OK	
big_diff([2]) → 0	0	OK	
big_diff([5, 1, 6, 1, 9, 9]) → 8	8	OK	
big_diff([7, 6, 8, 5]) → 3	3	OK	
big_diff([7, 7, 6, 8, 5, 5, 6]) → 3	3	OK	
other tests
OK	

All Correct
  

    


